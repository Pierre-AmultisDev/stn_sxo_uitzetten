# This workflow will create a draft release based on the previous release number.
# And will add the required content to that release
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: PDF Create Draft Release with Content Combi

on:
# Events that trigger this workflow
  workflow_dispatch:
  push:
    branches:
      - master

env:
  # set the values for this script
  # ==============================
  
  # name of the python app without .py extension
  AMUDEV_PYTHON_APP: "create_pdf_from_csv_borb"

  # prefix for pip requirements file
  AMUDEV_PREFIX_REQ: "pdf_"

  # Python version to use for building 
  AMUDEV_PYTHON_VER: "3.10"
  
  # output debug info
  AMUDEV_DEBUG_INFO: true

permissions:
  # contents: write access required to create new releases
  contents: write
  
jobs:

  build_python_exe:
  # every job is run on its own clean/empty server

    runs-on: windows-latest
    
    steps:
    - name: DEBUG List env.vars
      id: dbg_list_env_vars
      run: |
       echo "[debug] AMUDEV_DEBUG_INFO: ->${{ env.AMUDEV_DEBUG_INFO }}<-"
       echo "[debug] AMUDEV_PYTHON_APP: ->${{ env.AMUDEV_PYTHON_APP }}<-"
       echo "[debug] AMUDEV_PYTHON_VER: ->${{ env.AMUDEV_PYTHON_VER }}<-"
       echo "[debug] AMUDEV_PREFIX_REQ: ->${{ env.AMUDEV_PREFIX_REQ }}<-"

    - name: Checkout repository
      # https://github.com/actions/checkout
      # use the standard checkout mechanism on github
      uses: actions/checkout@v4
      
    - name: Set up Python
      # https://github.com/actions/setup-python
      # uses the latest setup-version on github
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.AMUDEV_PYTHON_VER }}

    - name: Install pip and requirements for the app
      run: |
        python -m pip install --upgrade pip
        if (Test-Path -path ./requirements/${{ env.AMUDEV_PREFIX_REQ }}requirements.txt -PathType Leaf) {
          pip install -r ./requirements/${{ env.AMUDEV_PREFIX_REQ }}requirements.txt
        }
        
    - name: Install dependencies
      run: |
        pip install flake8 pyinstaller ruff

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint with Ruff
      run: |
        ruff check . --output-format=github
      continue-on-error: true
    
    - name: Build executable
      run: |
        if (Test-Path -path ${{ env.AMUDEV_PYTHON_APP }}.spec -PathType Leaf) {
          pyinstaller --clean ${{ env.AMUDEV_PYTHON_APP }}.spec
        } else {
          pyinstaller --clean --onefile ${{ env.AMUDEV_PYTHON_APP }}.py
        }

    - name: Show pip as build
      run: |
        python -m pip freeze > pip_as_build.txt
        cat pip_as_build.txt

    - name: Upload Executable
      # https://github.com/actions/upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.AMUDEV_PYTHON_APP }}.exe
        path: dist/${{ env.AMUDEV_PYTHON_APP }}.exe

  create_draft_release:
  # every job is run on its own clean/empty server

    # wait for build_python_exe to complete
    needs: build_python_exe

    # I haven't figured windows steps out yet so let's use Ubuntu as many examples are available 
    runs-on: ubuntu-latest    
    
    steps: 
    - name: DEBUG List repository info
      id: dbg_list_repository_info
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          echo "[debug] GITHUB_REPOSITORY: ->${GITHUB_REPOSITORY}<-"
          echo "[debug] GITHUB_TOKEN     : ->${GITHUB_TOKEN}<-"
        fi

    - name: DEBUG get latest release info
      id: dbg_get_latest_release_info
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | jq -r '.tag_name' > release.txt
          cat release.txt
        fi

    - name: Get Latest Release
      id: get_latest_release
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | jq -r '.tag_name')
        echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
      shell: bash
      continue-on-error: false # if no release is available currently exits with error; maybe set to true

    - name: DEBUG release info
      id: dbg_release_info
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          echo "[debug] LATEST_RELEASE: ->${LATEST_RELEASE}<-"
        fi
        
    - name: Determine New Release Version
      id: determine_version
      run: |
        if [ "${LATEST_RELEASE}" == "null" ]
        then
          NEW_VERSION="v0.0.0"
        else
          OLD_VERSION="${LATEST_RELEASE#v}"
          # https://stackoverflow.com/questions/74072715/how-to-use-internal-field-separator-correctly
          IFS='.' read -r -a VERSION_PARTS <<< "${OLD_VERSION}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          # add 1 to current path version
          PATCH=$((${VERSION_PARTS[2]}+1))
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        fi
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      shell: bash

    - name: DEBUG Echo new_version release
      id: dbg_echo_new_version_release
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          echo "[debug] NEW_VERSION: ->$NEW_VERSION<-"
        fi
        
    - name: Checkout repository
      # https://github.com/actions/checkout
      # use the standard checkout mechanism on github
      uses: actions/checkout@v4
      
    - name: Download Executable
      # https://github.com/actions/download-artifact
      # Since actions/checkout cleans the working folder we have to download exe after that 
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.AMUDEV_PYTHON_APP }}.exe
        path: ./dist/
      
    - name: Copy files to /dist
      run: |
        cp ./dist/${{ env.AMUDEV_PYTHON_APP }}.exe ./${{ env.AMUDEV_PYTHON_APP }}_${{ env.NEW_VERSION }}.exe
        
        cp ${GITHUB_WORKSPACE}/${{ env.AMUDEV_PREFIX_REQ }}parameters-template.json ./dist/       
        
    - name: Create zip file
      run: |
        cd ./dist/
        zip -r ../${{ env.AMUDEV_PYTHON_APP }}.zip ./
        cd ..

    - name: DEBUG Echo folder info
      id: dbg_echo_folder_info
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          ls -R ${GITHUB_WORKSPACE} > dir.txt
          cat dir.txt
        fi

    - name: DEBUG Environment Variables Values
      id: dbg_environment_variables_values
      run: |
        if [ "${{ env.AMUDEV_DEBUG_INFO }}" == "true" ]; then
          printenv > env.txt
          cat env.txt
        fi

    - name: Create Draft Release
      id: create_draft_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        name: Release ${{ env.NEW_VERSION }}
        draft: true
        prerelease: false
        files: |
             ./${{ env.AMUDEV_PYTHON_APP }}.zip
             ./${{ env.AMUDEV_PYTHON_APP }}_${{ env.NEW_VERSION }}.exe